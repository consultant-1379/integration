@Library("PipelineGlobalLibrary") _
import com.ericsson.ci.mason.Mason2
import java.text.SimpleDateFormat

def _project = "5G_automation/integration-test"
def _branch = "master"

def _unit = "spinnint"
def _credentials = "userpwd-adp"
def _gerrit_user = ""
def _gerrit_pass = ""
def _cloud = "eccd-ans-udm19165"
def _kubeConf = _cloud + "_admin.conf"

def _automation_testcase_docker_tag = params.AUTOMATION_TESTCASES_DOCKER_TAG?: "latest"
def _automation_testcases_container = [name: "automation-test-cases", url:"armdocker.rnd.ericsson.se/proj-udm-5g-integration-test/udm5g-function-testcases", tag: _automation_testcase_docker_tag]
def _namespace = "5g-integration"
def _suite_file = "udm5g-function-testcases/src/main/resources/suites/functionTest/AdpTestSuite.yaml"
def _client_id = params.CLIENT_ID
def _client_secret = params.CLIENT_SECRET
def _http_server = "udm5g-function-testcases-service-" + env.BUILD_NUMBER
def _log_dir = "JCAT_LOGS"
def _jcat_logging_level = params.JCAT_DEBUG ? 'debug' : 'info'
def _mibs_dir = "/root/.snmp/mibs"
def _timestamp = new SimpleDateFormat("MMddyyyyHHmmss").format(new Date())
def _arm_url = "https://arm.rnd.ki.sw.ericsson.se/artifactory/proj-adp-common-pipeline-generic-local/"
def _arm_artifact_name = _log_dir + "-" + _timestamp + "-" + env.BUILD_NUMBER + ".tgz"
def _arm_logs_url = _arm_url + _arm_artifact_name
def _jenkins_job_description = "Download JCAT logs: <a href=\"" + _arm_logs_url + "\" target=\"_blank\">" + _arm_logs_url + "</a>"
def _triggered_chart_name = params.TRIGGERED_CHART_NAME

def _ms_cmtestsuite = ["eric-data-document-database-pg","eric-cm-mediator","eric-data-coordinator-zk","eric-data-message-bus-kf","eric-cm-yang-provider","eric-sec-key-management","eric-sec-sip-tls","eric-data-distributed-coordinator-ed","eric-cnom-server","eric-cnom-document-database-mg","eric-tm-ingress-controller-cr","eric-lm-combined-server","eric-sec-certm","eric-lm-unique-object-reporter","eric-sec-admin-user-management","eric-sec-access-mgmt"]
def _ms_pmtestsuite = ["eric-pm-server","eric-pm-bulk-reporter"]
def _ms_logtestsuite = ["eric-odca-diagnostic-data-collector","eric-log-shipper","eric-data-search-engine","eric-data-search-engine-curator","eric-log-transformer","eric-sec-ldap-server"]
def _ms_backuprestoresuite = ["eric-ctrl-bro"]
def _ms_fmtestsuite = ["eric-fh-alarm-handler","eric-fh-snmp-alarm-provider"]
def _ms_iamtestsuite = ["eric-sec-access-mgmt"]

if (_ms_cmtestsuite.contains(_triggered_chart_name)){
   _suite_file = 'udm5g-function-testcases/src/main/resources/suites/jenkins/AdpCMTestSuite.yaml'
} else if (_ms_pmtestsuite.contains(_triggered_chart_name)) {
   _suite_file = 'udm5g-function-testcases/src/main/resources/suites/jenkins/AdpPMTestSuite.yaml'
} else if (_ms_logtestsuite.contains(_triggered_chart_name)) {
   _suite_file = 'udm5g-function-testcases/src/main/resources/suites/jenkins/AdpLogTestSuite.yaml'
} else if (_ms_backuprestoresuite.contains(_triggered_chart_name)) {
   _suite_file = 'udm5g-function-testcases/src/main/resources/suites/jenkins/AdpBackupRestoreTestSuite.yaml'
} else if (_ms_fmtestsuite.contains(_triggered_chart_name)) {
   _suite_file = 'udm5g-function-testcases/src/main/resources/suites/jenkins/AdpFMTestSuite.yaml'
} else if (_ms_iamtestsuite.contains(_triggered_chart_name)) {
   _suite_file = 'udm5g-function-testcases/src/main/resources/suites/jenkins/AdpIAMTestSuite.yaml'
} else {
   _suite_file = params.SUITE_FILE 
}

if (System.getenv("JENKINS_HOME")) { // Jenkins execution
    _cloud = params.CLOUD?: _cloud
    _kubeConf = _cloud + "_admin.conf"
    // Import Gerrit credentials
    withCredentials([usernamePassword(credentialsId: "${_credentials}",
                                      usernameVariable: "GERRIT_USER",
                                      passwordVariable: "GERRIT_PASS")
                    ]){
        _gerrit_user = GERRIT_USER
        _gerrit_pass = GERRIT_PASS
    }
} else { // Local Execution
        _gerrit_user = ''       // Assign value to this credential locally
        _gerrit_pass = ''       // Assign value to this credential locally
}

def result = Mason2.ciPipeline(this) {
    additionalData("product", 'UNIV')
    additionalData("cl_pipeline", 'CLe0')
    additionalData("owner_name": 'UNIV')
    additionalData("owner_email": 'PDLUDM5GIN@pdl.internal.ericsson.com')
    additionalData("artifact_name", 'adp-common-chart')
    cloud(_cloud)
    parallel(false)
    unit(_unit)
    checkout {
        gerrit("checkout") {
            project(_project)
            credentials(_credentials)
            branch(_branch)
            advancedsubopts {
                recursiveupdate(true)
                useparentcreds(true)
                timeout(20)
            }
            cleanbeforecheckout()
            advancedcheckout {
                timeout(40)
            }
            wipeoutrepo()
        }
    }

    script {
        shell("Download mibs") {
            dind(true)
            privileged(true)
            when("ALWAYS")
            credentials('arm-sero-identity-token-adp')
            container(_automation_testcases_container.name, _automation_testcases_container.url, _automation_testcases_container.tag, true)
            cmd("""
                curl -u "\${username}:\${passwd}" -o ./mibs.tgz https://arm.rnd.ki.sw.ericsson.se/artifactory/proj-integration-mibs-generic-local/mibs.tgz
                mkdir -p \"/root/.snmp\"
                tar xzf mibs.tgz -C \"/root/.snmp\"
                echo "mibs +ERICSSON-ALARM-PC-MIB:ERICSSON-ALARM-TC-MIB:ERICSSON-ALARM-XPATH-MIB:ERICSSON-TC-MIB:ERICSSON-TOP-MIB" >>\"/root/.snmp/snmp.conf\"
            """)
            }
       }

       script {
        shell("Install testcases service") {
            dind(true)
            privileged(true)
            when("ALWAYS")
            kubeConfig(_kubeConf)
            container(_automation_testcases_container.name, _automation_testcases_container.url, _automation_testcases_container.tag, true)
            cmd("""
                POD_NAMESPACE=\$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace 2> /dev/null);

                labels=\$(kubectl get pods \"\${HOSTNAME}\" -n \"\${POD_NAMESPACE}\" -o custom-columns=LABELS:.metadata.labels | grep -v LABELS)

                helm install ${_http_server} /root/udm5g-function-testcases-service \\
                --namespace \"\${POD_NAMESPACE}\" \\
                --set container.env.hostname=\"\${HOSTNAME}\" \\
                --set service.selector=\"\${labels}\"
            """)
            }
       }

    script {
        shell("Run test case suite") {
            dind(true)
            privileged(true)
            when("ALWAYS")
            kubeConfig(_kubeConf)
            container(_automation_testcases_container.name, _automation_testcases_container.url, _automation_testcases_container.tag, true)
            cmd("""

                EDA_CLIENT_FILE=\"eda.client.yaml\"
                echo \"clientId: \"${_client_id} > \${EDA_CLIENT_FILE}
                echo \"clientSecret: \"${_client_secret} >> \${EDA_CLIENT_FILE}
                cat \${EDA_CLIENT_FILE}

                cp \${KUBECONFIG} admin.conf
                ADMIN_CONF=admin.conf

                JAR_FILE=\$(find /root -name udm5g-function-testcases.jar)

                export PS1=\"seliius.dockerlocal\$ \"

                java \\
                  -Dkube.config.file=\"\${ADMIN_CONF}\" \\
                  -Dkube.namespace=${_namespace} \\
                  -Denable.proxy=false \\
                  -Dbinaries.path=/usr/local/bin \\
                  -Denable.proxy=false \\
                  -Dmibs.path=${_mibs_dir} \\
                  -Dlogdir=\"\${WORKSPACE}/${_log_dir}\" \\
                  -Djcat.logging=${_jcat_logging_level} \\
                  -Deda.client.file=\"\${EDA_CLIENT_FILE}\" \\
                  -Dcredentials.file=\"\${WORKSPACE}/udm5g-extensions/src/main/resources/credentials/default_credentials_adp.yaml\" \
                  -jar \"\${JAR_FILE}\" \\
                  ${_suite_file}

                jcatStatistics=\$(find \${WORKSPACE}/${_log_dir} -name JcatStatistics.txt)
                cat \${jcatStatistics}
                testResult=\$(cat \${jcatStatistics} | jq .testSuiteVerdict)
                if [ \${testResult} != '\"PASS\"' ] ; then
                    exit 99
                fi

            """)
        }
    }

    jenkins {
        dsl("showTestResult"){
            when("ALWAYS")
            cmd {
                junit allowEmptyResults: true, testResults: _log_dir + '/**/jenkins.xml'
            }
        }
    }

    jenkins {
        dsl("Archive JCAT logs"){
            when("ALWAYS")
            cmd {
                archiveArtifacts allowEmptyArchive: true, artifacts: _log_dir + '/**', onlyIfSuccessful: false
            }
        }
    }

    script {
        shell("Package JCAT logs") {
            env("_arm_artifact_name", _arm_artifact_name)
            env("_log_dir", _log_dir)
            dind(true)
            privileged(true)
            when("ALWAYS")
            container(_automation_testcases_container.name, _automation_testcases_container.url, _automation_testcases_container.tag, true)
            cmd("""
                [ -d \"\${_log_dir}\" ] && tar -cvf \"\${_arm_artifact_name}\" \"\${_log_dir}\" --exclude='.helm'
            """)
        }
    }

    store {
        arm("push-jcat-logs") {
            depends("Run test case suite")
            credentials('arm-sero-identity-token-adp')
            artifact(_arm_artifact_name)
            dateAttach(false)
            compress(false)
            onlyIfExists(true)
            url(_arm_url)
            when("ALWAYS")
        }
    }

   jenkins {
        dsl("Add link in description"){
            when("ALWAYS")
            cmd {
                buildDescription _jenkins_job_description
            }
        }
    }
}
